import { Context } from 'telegraf'
import { MessageFormatter } from '../utils/messageFormatter'
import { OrderService } from '../services/orderService'

export class CallbackHandlers {
  static async handleMainMenu(ctx: Context) {
    const welcomeMessage = `
üéâ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞ "–ú—É–∂—Å–∫–æ–π —Å—Ç–∏–ª—å"*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    `

    await ctx.editMessageText(welcomeMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', web_app: { url: process.env.MINI_APP_URL! } }
          ],
          [
            { text: 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' },
            { text: 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' }
          ],
          [
            { text: '‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ', callback_data: 'about' }
          ]
        ]
      }
    })
  }

  static async handleMyOrders(ctx: Context) {
    const userId = ctx.from?.id
    if (!userId) {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return
    }

    try {
      const orders = await OrderService.getUserOrders(userId)
      
      if (orders.length === 0) {
        await ctx.editMessageText('üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤', {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üõç –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑', web_app: { url: process.env.MINI_APP_URL! } }
              ],
              [
                { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
              ]
            ]
          }
        })
        return
      }

      const message = MessageFormatter.formatOrdersList(orders)
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üõç –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑', web_app: { url: process.env.MINI_APP_URL! } }
            ],
            [
              { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
            ]
          ]
        }
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error)
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤')
    }
  }

  static async handleSupport(ctx: Context) {
    const supportMessage = `
üìû *–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏*

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑–∞–º, –¥–æ—Å—Ç–∞–≤–∫–µ –∏–ª–∏ —Ç–æ–≤–∞—Ä–∞–º, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

*–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* 9:00 - 21:00 (–ú–°–ö)
*–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:*
‚Ä¢ –ß–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
‚Ä¢ Email: support@example.com

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:
    `

    await ctx.editMessageText(supportMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      }
    })
  }

  static async handleAbout(ctx: Context) {
    const aboutMessage = `
üè™ *–û –º–∞–≥–∞–∑–∏–Ω–µ "–ú—É–∂—Å–∫–æ–π —Å—Ç–∏–ª—å"*

–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –º—É–∂—Å–∫–æ–π –æ–¥–µ–∂–¥–µ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞—Ö.

*–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*
‚Ä¢ ‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ üöö –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
‚Ä¢ üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
‚Ä¢ üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π
‚Ä¢ üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:*
‚Ä¢ üëî –ö–æ—Å—Ç—é–º—ã –∏ –ø–∏–¥–∂–∞–∫–∏
‚Ä¢ üëï –†—É–±–∞—à–∫–∏ –∏ —Ñ—É—Ç–±–æ–ª–∫–∏
‚Ä¢ üëñ –ë—Ä—é–∫–∏ –∏ –¥–∂–∏–Ω—Å—ã
‚Ä¢ üëü –û–±—É–≤—å
‚Ä¢ üéí –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã

*–î–æ—Å—Ç–∞–≤–∫–∞:* –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏
*–û–ø–ª–∞—Ç–∞:* –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
    `

    await ctx.editMessageText(aboutMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω', web_app: { url: process.env.MINI_APP_URL! } }
          ],
          [
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      }
    })
  }

  static async handleViewOrder(ctx: Context, orderId: string) {
    try {
      const order = await OrderService.getOrderById(orderId)
      const items = await OrderService.getOrderItems(orderId)

      if (!order || !items) {
        await ctx.answerCbQuery('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
      }

      const message = MessageFormatter.formatOrderForUser(order, items)
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üõç –°–¥–µ–ª–∞—Ç—å –µ—â–µ –∑–∞–∫–∞–∑', web_app: { url: process.env.MINI_APP_URL! } }
            ],
            [
              { text: 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' },
              { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
            ]
          ]
        }
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞:', error)
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–∫–∞–∑–∞')
    }
  }

  static async handleConfirmOrder(ctx: Context, orderId: string) {
    try {
      const success = await OrderService.updateOrderStatus(orderId, 'confirmed')
      if (success) {
        await ctx.answerCbQuery('‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')
        await ctx.editMessageReplyMarkup({
          inline_keyboard: [
            [
              { text: 'üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: `ship_order_${orderId}` },
              { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: `cancel_order_${orderId}` }
            ],
            [
              { text: 'üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤', callback_data: 'admin_orders' }
            ]
          ]
        })
      } else {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error)
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    }
  }

  static async handleShipOrder(ctx: Context, orderId: string) {
    try {
      const success = await OrderService.updateOrderStatus(orderId, 'shipped')
      if (success) {
        await ctx.answerCbQuery('üì¶ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
        await ctx.editMessageReplyMarkup({
          inline_keyboard: [
            [
              { text: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', callback_data: `deliver_order_${orderId}` }
            ],
            [
              { text: 'üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤', callback_data: 'admin_orders' }
            ]
          ]
        })
      } else {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:', error)
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    }
  }

  static async handleDeliverOrder(ctx: Context, orderId: string) {
    try {
      const success = await OrderService.updateOrderStatus(orderId, 'delivered')
      if (success) {
        await ctx.answerCbQuery('‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω')
        await ctx.editMessageReplyMarkup({
          inline_keyboard: [
            [
              { text: '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', callback_data: 'admin_orders' }
            ]
          ]
        })
      } else {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:', error)
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    }
  }

  static async handleCancelOrder(ctx: Context, orderId: string) {
    try {
      const success = await OrderService.updateOrderStatus(orderId, 'cancelled')
      if (success) {
        await ctx.answerCbQuery('‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω')
        await ctx.editMessageReplyMarkup({
          inline_keyboard: [
            [
              { text: 'üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤', callback_data: 'admin_orders' }
            ]
          ]
        })
      } else {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:', error)
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    }
  }

  static async handleAdminOrders(ctx: Context) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const adminChatId = process.env.ADMIN_CHAT_ID
    const userId = ctx.from?.id

    if (!adminChatId || userId?.toString() !== adminChatId) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
      return
    }

    try {
      const orders = await OrderService.getAllOrders()
      
      if (orders.length === 0) {
        await ctx.editMessageText('üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç', {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', web_app: { url: `${process.env.MINI_APP_URL}/admin` } }
              ],
              [
                { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
              ]
            ]
          }
        })
        return
      }

      const message = MessageFormatter.formatOrdersList(orders)
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', web_app: { url: `${process.env.MINI_APP_URL}/admin` } }
            ],
            [
              { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
              { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
            ]
          ]
        }
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∞–¥–º–∏–Ω–∞:', error)
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤')
    }
  }

  static async handleAdminStats(ctx: Context) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const adminChatId = process.env.ADMIN_CHAT_ID
    const userId = ctx.from?.id

    if (!adminChatId || userId?.toString() !== adminChatId) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
      return
    }

    try {
      const stats = await OrderService.getOrderStats()
      const statsMessage = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞*

*–ó–∞–∫–∞–∑—ã:*
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${stats.total}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${stats.pending}
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: ${stats.confirmed}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: ${stats.shipped}
‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö: ${stats.delivered}
‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: ${stats.cancelled}
    `

      await ctx.editMessageText(statsMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', web_app: { url: `${process.env.MINI_APP_URL}/admin` } }
            ],
            [
              { text: 'üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã', callback_data: 'admin_orders' },
              { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
            ]
          ]
        }
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
    }
  }
} 