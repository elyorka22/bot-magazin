import { Telegraf } from 'telegraf'
import dotenv from 'dotenv'
import express from 'express'
import cors from 'cors'
import { CommandHandlers } from './handlers/commandHandlers'
import { CallbackHandlers } from './handlers/callbackHandlers'
import { OrderService } from './services/orderService'
import { MessageFormatter } from './utils/messageFormatter'
import { testConnection } from './config/database'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

// –°–æ–∑–¥–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
const app = express()
const PORT = process.env.PORT || 3001

// Middleware
app.use(cors())
app.use(express.json())

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() })
})

// Root endpoint
app.get('/', (req, res) => {
  res.json({ 
    status: 'ok', 
    service: 'telegram-bot',
    timestamp: new Date().toISOString() 
  })
})

// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, () => {
  console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
})

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if (!process.env.BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  process.exit(1)
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN)

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use(async (ctx, next) => {
  const start = new Date()
  await next()
  const ms = new Date().getTime() - start.getTime()
  console.log('‚è±', ctx.updateType, '–∑–∞', ms, 'ms')
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.start(CommandHandlers.handleStart)
bot.help(CommandHandlers.handleHelp)
bot.command('orders', CommandHandlers.handleOrders)
bot.command('support', CommandHandlers.handleSupport)
bot.command('about', CommandHandlers.handleAbout)
bot.command('stats', CommandHandlers.handleStats)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.action('main_menu', CallbackHandlers.handleMainMenu)
bot.action('my_orders', CallbackHandlers.handleMyOrders)
bot.action('support', CallbackHandlers.handleSupport)
bot.action('about', CallbackHandlers.handleAbout)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏
bot.action(/view_order_(.+)/, async (ctx) => {
  const orderId = ctx.match[1]
  await CallbackHandlers.handleViewOrder(ctx, orderId)
})

bot.action(/confirm_order_(.+)/, async (ctx) => {
  const orderId = ctx.match[1]
  await CallbackHandlers.handleConfirmOrder(ctx, orderId)
})

bot.action(/ship_order_(.+)/, async (ctx) => {
  const orderId = ctx.match[1]
  await CallbackHandlers.handleShipOrder(ctx, orderId)
})

bot.action(/deliver_order_(.+)/, async (ctx) => {
  const orderId = ctx.match[1]
  await CallbackHandlers.handleDeliverOrder(ctx, orderId)
})

bot.action(/cancel_order_(.+)/, async (ctx) => {
  const orderId = ctx.match[1]
  await CallbackHandlers.handleCancelOrder(ctx, orderId)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const message = ctx.message.text
  
  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (—ç—Ç–æ –∫–æ–º–∞–Ω–¥—ã)
  if (message.startsWith('/')) {
    return
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
  const adminChatId = process.env.ADMIN_CHAT_ID
  if (adminChatId) {
    const user = ctx.from
    const userInfo = `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user?.first_name} ${user?.last_name || ''}\n`
    const username = user?.username ? `@${user.username}\n` : ''
    const userId = `ID: ${user?.id}\n\n`
    const fullMessage = userInfo + username + userId + message

    try {
      await ctx.telegram.sendMessage(adminChatId, fullMessage)
      await ctx.reply('‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error)
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    }
  } else {
    await ctx.reply('üí¨ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.')
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App
bot.on('web_app_data', async (ctx) => {
  try {
    const data = JSON.parse(ctx.message.web_app_data.data)
    console.log('üì± –î–∞–Ω–Ω—ã–µ –æ—Ç Mini App:', data)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç Mini App
    if (data.type === 'order') {
      const orderData = data.order
      const userId = ctx.from?.id

      if (!userId) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const orderId = await OrderService.createOrder({
        ...orderData,
        telegram_user_id: userId,
        user_id: userId.toString(),
        status: 'pending',
        payment_method: 'cash',
        payment_status: 'pending'
      })

      if (orderId) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏ –µ–≥–æ –ø–æ–∑–∏—Ü–∏–∏
        const order = await OrderService.getOrderById(orderId)
        const items = await OrderService.getOrderItems(orderId)

        if (order && items) {
          const message = MessageFormatter.formatOrderForUser(order, items)
          
          await ctx.reply('üéâ *–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*', { parse_mode: 'Markdown' })
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'üõç –°–¥–µ–ª–∞—Ç—å –µ—â–µ –∑–∞–∫–∞–∑', web_app: { url: process.env.MINI_APP_URL! } }
                ],
                [
                  { text: 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' }
                ]
              ]
            }
          })

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
          const adminChatId = process.env.ADMIN_CHAT_ID
          if (adminChatId) {
            const adminMessage = MessageFormatter.formatOrderForAdmin(order, items)
            await ctx.telegram.sendMessage(adminChatId, adminMessage, {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_order_${orderId}` },
                    { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_order_${orderId}` }
                  ]
                ]
              }
            })
          }
        }
      } else {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞')
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö')
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err)
  ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
})

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function startBot() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const dbConnected = await testConnection()
    if (!dbConnected) {
      console.log('‚ö†Ô∏è  –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.launch()
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    console.log('ü§ñ –ò–º—è –±–æ—Ç–∞:', (await bot.telegram.getMe()).first_name)
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await bot.telegram.setMyCommands([
      { command: 'start', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
      { command: 'help', description: '–ü–æ–º–æ—â—å' },
      { command: 'orders', description: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' },
      { command: 'support', description: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' },
      { command: 'about', description: '–û –º–∞–≥–∞–∑–∏–Ω–µ' }
    ])

    // Graceful stop
    process.once('SIGINT', () => bot.stop('SIGINT'))
    process.once('SIGTERM', () => bot.stop('SIGTERM'))
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot() 