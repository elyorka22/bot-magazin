import { Telegraf } from 'telegraf'
import dotenv from 'dotenv'
import express from 'express'
import cors from 'cors'
import { CommandHandlers } from './handlers/commandHandlers'
import { CallbackHandlers } from './handlers/callbackHandlers'
import { OrderService } from './services/orderService'
import { MessageFormatter } from './utils/messageFormatter'
import { testConnection } from './config/database'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...')

// –°–æ–∑–¥–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
const app = express()
const PORT = process.env.PORT || 3001

// Middleware
app.use(cors())
app.use(express.json())

// Health check endpoint
app.get('/health', (req, res) => {
  console.log('üè• Health check –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω')
  res.status(200).json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    service: 'telegram-bot',
    uptime: process.uptime(),
    port: PORT,
    bot: 'running'
  })
})

// Root endpoint
app.get('/', (req, res) => {
  console.log('üè† Root endpoint –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω')
  res.status(200).json({ 
    status: 'ok', 
    service: 'telegram-bot',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    message: 'Bot service is running'
  })
})

// Test endpoint
app.get('/test', (req, res) => {
  console.log('üß™ Test endpoint –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω')
  res.status(200).json({ 
    status: 'ok', 
    message: 'Test endpoint working',
    timestamp: new Date().toISOString()
  })
})

// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = app.listen(Number(PORT), '0.0.0.0', () => {
  console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
  console.log(`üè• Health check –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:${PORT}/health`)
  console.log(`üè† Root endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:${PORT}/`)
  console.log(`üß™ Test endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:${PORT}/test`)
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞:', error)
  process.exit(1)
})

server.on('listening', () => {
  console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã')
})

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω)
let bot: Telegraf | null = null

if (process.env.BOT_TOKEN) {
  console.log('‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞...')
  bot = new Telegraf(process.env.BOT_TOKEN)

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
  bot.start(CommandHandlers.handleStart)
  bot.help(CommandHandlers.handleHelp)
  bot.command('orders', CommandHandlers.handleOrders)
  bot.command('support', CommandHandlers.handleSupport)
  bot.command('about', CommandHandlers.handleAbout)
  bot.command('stats', CommandHandlers.handleStats)

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('text', (ctx) => {
    console.log('üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', ctx.message.text)
    ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.')
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  bot.catch((err, ctx) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err)
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
  bot.action('main_menu', CallbackHandlers.handleMainMenu)
  bot.action('my_orders', CallbackHandlers.handleMyOrders)
  bot.action('support', CallbackHandlers.handleSupport)
  bot.action('about', CallbackHandlers.handleAbout)
  bot.action('admin_orders', CallbackHandlers.handleAdminOrders)
  bot.action('admin_stats', CallbackHandlers.handleAdminStats)

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏
  bot.action(/view_order_(.+)/, async (ctx) => {
    const orderId = ctx.match[1]
    await CallbackHandlers.handleViewOrder(ctx, orderId)
  })

  bot.action(/confirm_order_(.+)/, async (ctx) => {
    const orderId = ctx.match[1]
    await CallbackHandlers.handleConfirmOrder(ctx, orderId)
  })

  bot.action(/ship_order_(.+)/, async (ctx) => {
    const orderId = ctx.match[1]
    await CallbackHandlers.handleShipOrder(ctx, orderId)
  })

  bot.action(/deliver_order_(.+)/, async (ctx) => {
    const orderId = ctx.match[1]
    await CallbackHandlers.handleDeliverOrder(ctx, orderId)
  })

  bot.action(/cancel_order_(.+)/, async (ctx) => {
    const orderId = ctx.match[1]
    await CallbackHandlers.handleCancelOrder(ctx, orderId)
  })

  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
  bot.launch().then(() => {
    console.log('‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!')
  }).catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞:', error)
    console.log('‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Telegram –±–æ—Ç–∞')
  })
} else {
  console.log('‚ö†Ô∏è  BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Telegram –±–æ—Ç–∞')
  console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!')
}

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...')
  if (bot) {
    bot.stop('SIGINT')
  }
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    process.exit(0)
  })
})

process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...')
  if (bot) {
    bot.stop('SIGTERM')
  }
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    process.exit(0)
  })
}) 